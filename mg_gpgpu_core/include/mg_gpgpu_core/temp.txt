#include <iostream>
#include <parallel_scan.h>
#include <vector>
#include <algorithm>
#include <fstream>
#include <string>

void inclusive_scan(std::vector<unsigned int>& data)
{

    for (int i =1; i<data.size(); ++i)
    {
        data[i] += data[i-1];    
    }

}
//void esclusive_scan(std::vector<unsigned int>& data)
//{
//    std::vector<unsigned int> out;
//    out.resize(data.size());
//    out[0]=0;
//    for (int i =1; i<data.size(); ++i)
//    {
//        out[i] = (data[i-1] + out[i-1]);    
//    }
//    
//    for (int i =1; i<data.size(); ++i)
//    {
//        data[i] = out[i];
//    }
//}



int main()
{
    int count =0;
    while(true)
    {
        std::vector<unsigned int > data;
        std::vector<unsigned int > original;
        unsigned int size = rand() %(100000) ;
        std::cout<<size<<std::endl;
        data.resize(size);
        original.resize(size);
        for (int i =0 ; i <size; ++i)
        {
            data[i] = rand() % 10 + 1;
            original[i] = data[i];
            //if (i <=2 )
            //{
            //    std::cout<<data[i]<<std::endl; 
            //}
        }

        std::cout<<"calling_cuda"<<std::endl;
        auto ptr = data.data();
        auto cudares = parallel_scan(ptr, size);
        inclusive_scan(data);
        for(int i =1; i < size; ++i)
        {
            
           if( data[i] != cudares[i])
           {
               
                std::cout<<"iter "<<count<<" ERROR AT INDEX: "<<i<<", "<<data[i]<<" "<<cudares[i]<<std::endl; 
                std::string output = "original = [";

                for ( auto d: original)
                {
                    output += std::to_string(d) + ", "; 
                }

                output += "] \n cpu = [";
                for ( auto d: data)
                {
                    output += std::to_string(d) + ", "; 
                }
                output += "] \n gpu = [";
                for (int i =0 ; i<size; ++i)
                {
                    output += std::to_string(cudares[i] ) +", ";
                
                }
                std::ofstream out("output.txt");
                out << output;
                out.close();
                return 0;

           } 
        
        }
        ++count;
    }

}
